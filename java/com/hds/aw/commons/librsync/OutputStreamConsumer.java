//
// The MIT License (MIT)
//
// Copyright (c) 2015 Hitachi Data Systems
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

package com.hds.aw.commons.librsync;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;

/**
 * Consumes output produced by librsync. For example, for a librsync signature job, the output to
 * consume is the actual signature generated by librsync.
 * 
 * This implementation writes the output to a provided OutputStream
 *
 * @author Beth Tirado, Hitachi Data Systems
 */
public class OutputStreamConsumer implements RsyncOutputConsumer {
    private OutputStream[] outStreams;
    private byte[] bytes;

    /**
     * Construct an OutputStreamConsumer that will consume the librsync output
     * 
     * @param outputStreams
     *            output is consumed and written to all provided OutputStreams
     */
    public OutputStreamConsumer(OutputStream... outputStreams) {
        outStreams = outputStreams;
    }

    /**
     * Consumes output previously written to buf and writes it to the OutputStream provided in the
     * Constructor
     * 
     * @param buf
     *            the buffer containing output to consume
     */
    public void consumeOutput(ByteBuffer buf) throws IOException {
        if (bytes == null || bytes.length < buf.remaining()) {
            bytes = new byte[buf.capacity()];
        }

        int cnt = buf.remaining();
        buf.get(bytes, 0, cnt);
        for (OutputStream out : outStreams) {
            out.write(bytes, 0, cnt);
        }
    }
}
